#!/bin/sh -e

#============================================FUNCTIONS==============================================
usage()
{
  echo "$0 is a tool to
--------------------------------------------------------------------------
USAGE: $0 [ -s PATH -t PATH -u ] [ -r MAJOR.MINOR] [ -d ] [ -w DATE ] [-l]
  -d     #destroy the original git repos
  -l     #make a local database, instead of loading to ~/.startestdb
  -r     #make the release branch
  -s     #path to star (git repo), defaults to ${STAR_HOME}
  -t     #path to startest (git repo), defaults to ${STARTEST_HOME}
  -u     #update the startest portion only, defaults to a full compile of star
  -w     #wait until the listed date to execute the make, MM/DD/YYYY HH:MM format
"
  echo $*
  exit 1
}


process_arguments()
{
  while [ $# -gt 0 ]; do
    case "$1" in
      -h|--help)
        usage
      ;;
      -d|-D)
        DESTROY=true
      ;;
      -l|-L)
        LOCAL_DATABASE=true
      ;;
      -r|-R)
        RELEASE=$2
        BRANCH=release
      ;;
      -s|-S)
        STAR_HOME=$2
      ;;
      -t|-T)
        STARTEST_HOME=$2
      ;;
      -u|-U)
        UPDATE=true
      ;;
      -w|-W)
        CURRENT_TIME=$(date +%s)
        if [ -z "$2" ]; then
          DATE=$(date --date="1 day" +%m/%d/%Y)
          TIME="06:00"
        else
          case "$2" in
            */*/*)
              DATE=$2
              case "$3" in
                *:*)
                  TIME=$3
                ;;
                *)
                  usage "Time must be in the 24 hour format \"HH:MM\". You requested $3"
                ;;
              esac
            ;;
            *)
              usage "Date must be in \"MM/DD/YYYY\"  format. You requested $2"
            ;;
          esac
        fi
        START_TIME=$(date -d "$DATE $TIME" +%s)
        DELAY=""
        let DELAY=START_TIME-CURRENT_TIME
        echo "waiting until $DATE $TIME to make-startest (${BRANCH:0:3})"
        sleep ${DELAY}
        shift
        shift
      ;;
    esac
    shift
  done
  if [ -z "$UPDATE" ]; then
    usage "I don't know what to do, exiting"
  fi
  if [ $BRANCH = release ]; then
    if [ -z "${RELEASE}" ]; then
      usage "No Major.Minor value specified for release build"
    fi
    if [ $STAR_HOME = ~/dev/star ]; then
      STAR_HOME=~/rel/star
    fi
    if [ $STARTEST_HOME = ~/dev/startest ]; then
      STARTEST_HOME=~/rel/startest
    fi
  fi
  if [ ! -d "${STAR_HOME}/.git" ]; then
    usage "Can't find a star directory (git repo) at ${STAR_HOME}/"
  fi
  if [ ! -d "${STARTEST_HOME}/.git" ]; then
    usage "Can't find a startest directory (git repo) at ${STARTEST_HOME}/"
  fi

  if [ ! -L ${STAR_HOME}/../.dev ]; then
    echo "Linking Mirror"
    if [ ${BRANCH} = 'development' ]; then
      ln -s /home/star/mirror ${STAR_HOME}/../.dev
    else
      ln -s /home/release/mirror ${STAR_HOME}/../.dev
    fi
  fi

}
#==========================================END FUNCTIONS============================================

BRANCH=development
DESTROY=false
LOCAL_DATABASE=false
STAR_HOME=~/dev/star
STARTEST_HOME=~/dev/startest
UPDATE=false

#if [ $# -lt 1 ]; then
#  usage "No arguments specified"
#fi

process_arguments "$@"

echo "STAR_HOME: ${STAR_HOME}
STARTEST_HOME: ${STARTEST_HOME}"

if [ "${UPDATE}" = false ]; then
  if [ "${DESTROY}" = true ]; then
    echo "DESTROYING star"
    cd ${STAR_HOME}/..
    nukE star
  fi
  echo "MAKING star"
  cd ${STAR_HOME}
  git checkout master
  git pull
if [ $BRANCH = release ]; then
  git checkout release/${RELEASE}
fi
  make -j 8
fi

if [ "${DESTROY}" = true ]; then
  echo "DESTROYING startest"
  cd ${STARTEST_HOME}/..
  nukE startest
fi

echo "MAKING startest"
cd ${STARTEST_HOME}
git checkout master
git pull
if [ $BRANCH = release ]; then
  git checkout release/${RELEASE}
fi
if [ "${LOCAL_DATABASE}" = true ]; then
  mkdir .startestdb
  touch .startestdb/startest.h2.db
fi
make 

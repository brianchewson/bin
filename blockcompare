#!/bin/sh -e

#============================================FUNCTIONS==============================================
usage()
{
  err_echo "$0 is a tool to compare the duplications within two files
-----------------------------------------------------------------------bch
USAGE: $0 <FILENAME> <FILENAME> [-m|-s|-t]
         # TWO files are required, in order to compare
    -m   # hash the files with md5sum (fastest) [default]
    -s   # hash with sha1sum 
    -t   # hash with sha256sum (slowest)
"
  err_echo $*
  exit 1
}

err_echo()
{
  echo "$@" 1>&2
}

find_matches()
{
  ONE="$1"
  TWO="$2"
  RET_VAL=0

  sort -u ${ONE} > ${ONE}.sorted
  while read HASH_ONE; do
    if grep -q -m 1 -- "${HASH_ONE}" ${TWO}; then
      RET_VAL=$((RET_VAL+1))
    fi
  done < ${ONE}.sorted

  # FOR FUTURE WORK - find the matches within a file as well
  echo "${RET_VAL}"
}

verify_dependencies()
{	
  for REQUIRED_FILE in ${REQUIRED_FILES}; do
    if [ ! -f ${WORKSPACE}/${REQUIRED_FILE} ]; then
      usage "${0##*/} requires a missing file, ${REQUIRED_FILE}, to run,
Please add ${REQUIRED_FILE} to ${WORKSPACE} to continue"
    fi
  done
}

process_arguments()
{
  while [ $# -gt 0 ]; do
    case "$1" in
      -h|--help)
        usage
      ;;
      -m|-M)
        HASH_ALGORITHM=md5sum
      ;;
      -s|-S)
        HASH_ALGORITHM=sha1sum
      ;;
      -t|-T)
        HASH_ALGORITHM=sha256sum
      ;;
      *)
        if [ -z "${FILE_A}" ]; then
          FILE_A="$1"
        else
           # If there's a file already in B to compare, the user may have entered too many args and
           # not realized it, let them know and let them decide how to proceed
           if [ -n "${FILE_B}" ]; then
             usage "Too many files supplied: Already using ${FILE_A} and ${FILE_B}"
           fi
           FILE_B="$1"
        fi
      ;;
    esac
    shift
  done
  for PIECE in HASH_ALGORITHM FILE_A FILE_B; do
    if [ -z "${!PIECE}" ]; then
      usage "NO ${PIECE} specified"
    fi
  done
  for PIECE in FILE_A FILE_B; do
    if [ ! -f "${!PIECE}" ]; then
      usage "${PIECE} ${!PIECE} doesn't exist"
    fi
  done

  REQUIRED_FILES=""
  if [ -n "${REQUIRED_FILES}" ]; then
    verify_dependencies 
  fi
}
#==========================================END FUNCTIONS============================================
if [ -z "${WORKSPACE}" ]; then
  WORKSPACE=$(pwd)
fi

A_HASHES="/tmp/A.hashes"
B_HASHES="/tmp/B.hashes"
FS_A_BLOCK_SIZE=""
FILE_A=""
FILE_B=""
HASH_ALGORITHM=md5sum

if [ $# -lt 2 ]; then
  usage "Not enough arguments specified"
fi

process_arguments "$@"

#find block size of the file system that contains FILE_A
FS_A_BLOCK_SIZE=$(stat -fc "%s" ${FILE_A})
echo "$FS_A_BLOCK_SIZE"

#get hashes
for PIECE in FILE_A FILE_B; do
  split -b ${FS_A_BLOCK_SIZE} --filter ${HASH_ALGORITHM} ${!PIECE} > /tmp/${PIECE#*_}.hashes
done

# compare hashes
# A could have duplicate lines that are not in B and vice versa, which is why we match 2x
LINES_A=$(wc -l < ${A_HASHES})
MATCH_A=$(find_matches ${A_HASHES} ${B_HASHES})

LINES_B=$(wc -l < ${B_HASHES})
MATCH_B=$(find_matches ${B_HASHES} ${A_HASHES})

#summary
echo "Summary:
-----------------------------------------------------------
${FILE_A}: ${LINES_A} blocks
${MATCH_A}/${LINES_A} are duplicates
===========================================================
${FILE_B}: ${LINES_B} blocks
${MATCH_B}/${LINES_B} are duplicates 
-----------------------------------------------------------
"
